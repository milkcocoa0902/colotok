package com.milkcocoa.info.colotok.core.logger

import com.milkcocoa.info.colotok.core.formatter.details.LogStructure
import com.milkcocoa.info.colotok.core.level.Level
import com.milkcocoa.info.colotok.core.level.LogLevel
import com.milkcocoa.info.colotok.core.provider.details.AsyncProvider
import com.milkcocoa.info.colotok.core.provider.details.Provider
import kotlinx.coroutines.test.runTest
import kotlinx.serialization.KSerializer
import kotlinx.serialization.Serializable
import kotlin.test.Test
import kotlin.test.assertEquals

/**
 * this test was generated by JetBrains Junie
 */
class ColotokLoggerExtensionTest {

    @Serializable
    data class TestLogStructure(val message: String) : LogStructure

    class TestAsyncProvider : AsyncProvider {
        var lastLogName: String = ""
        var lastLogMessage: String = ""
        var lastLogLevel: Level = LogLevel.INFO
        var lastLogAttributes: Map<String, String> = emptyMap()
        var lastLogStructure: LogStructure? = null

        override fun write(name: String, msg: String, level: Level) {
            lastLogName = name
            lastLogMessage = msg
            lastLogLevel = level
            lastLogAttributes = emptyMap()
        }

        override fun write(name: String, msg: String, level: Level, attr: Map<String, String>) {
            lastLogName = name
            lastLogMessage = msg
            lastLogLevel = level
            lastLogAttributes = attr
        }

        override fun <T : LogStructure> write(name: String, msg: T, serializer: KSerializer<T>, level: Level) {
            lastLogName = name
            lastLogStructure = msg
            lastLogLevel = level
            lastLogAttributes = emptyMap()
        }

        override fun <T : LogStructure> write(name: String, msg: T, serializer: KSerializer<T>, level: Level, attr: Map<String, String>) {
            lastLogName = name
            lastLogStructure = msg
            lastLogLevel = level
            lastLogAttributes = attr
        }

        override suspend fun writeAsync(name: String, msg: String, level: Level, attr: Map<String, String>) {
            lastLogName = name
            lastLogMessage = msg
            lastLogLevel = level
            lastLogAttributes = attr
        }

        override suspend fun <T : LogStructure> writeAsync(name: String, msg: T, serializer: KSerializer<T>, level: Level, attr: Map<String, String>) {
            lastLogName = name
            lastLogStructure = msg
            lastLogLevel = level
            lastLogAttributes = attr
        }
    }

    @Test
    fun testAtAsyncWithStringMessage() = runTest {
        val provider = TestAsyncProvider()
        val logger = ColotokLogger("test-logger") {
            providers = listOf(provider)
        }

        logger.atAsync(LogLevel.INFO, "Test message")

        assertEquals<String>("test-logger", provider.lastLogName)
        assertEquals<String>("Test message", provider.lastLogMessage)
        assertEquals<Level>(LogLevel.INFO, provider.lastLogLevel)
        assertEquals<Map<String, String>>(emptyMap(), provider.lastLogAttributes)
    }

    @Test
    fun testAtAsyncWithStringMessageAndAttributes() = runTest {
        val provider = TestAsyncProvider()
        val logger = ColotokLogger("test-logger") {
            providers = listOf(provider)
        }

        val attributes = mapOf("key1" to "value1", "key2" to "value2")
        logger.atAsync(LogLevel.INFO, "Test message", attributes)

        assertEquals<String>("test-logger", provider.lastLogName)
        assertEquals<String>("Test message", provider.lastLogMessage)
        assertEquals<Level>(LogLevel.INFO, provider.lastLogLevel)
        assertEquals<Map<String, String>>(attributes, provider.lastLogAttributes)
    }

    @Test
    fun testAtAsyncWithLogStructure() = runTest {
        val provider = TestAsyncProvider()
        val logger = ColotokLogger("test-logger") {
            providers = listOf(provider)
        }

        val logStructure = TestLogStructure("Test message")
        logger.atAsync(LogLevel.INFO, logStructure)

        assertEquals<String>("test-logger", provider.lastLogName)
        assertEquals<TestLogStructure>(logStructure, provider.lastLogStructure as TestLogStructure)
        assertEquals<Level>(LogLevel.INFO, provider.lastLogLevel)
        assertEquals<Map<String, String>>(emptyMap(), provider.lastLogAttributes)
    }

    @Test
    fun testAtAsyncWithLogStructureAndAttributes() = runTest {
        val provider = TestAsyncProvider()
        val logger = ColotokLogger("test-logger") {
            providers = listOf(provider)
        }

        val logStructure = TestLogStructure("Test message")
        val attributes = mapOf("key1" to "value1", "key2" to "value2")
        logger.atAsync(LogLevel.INFO, logStructure, attributes)

        assertEquals<String>("test-logger", provider.lastLogName)
        assertEquals<TestLogStructure>(logStructure, provider.lastLogStructure as TestLogStructure)
        assertEquals<Level>(LogLevel.INFO, provider.lastLogLevel)
        assertEquals<Map<String, String>>(attributes, provider.lastLogAttributes)
    }

    @Test
    fun testTraceAsync() = runTest {
        val provider = TestAsyncProvider()
        val logger = ColotokLogger("test-logger") {
            providers = listOf(provider)
        }

        logger.traceAsync("Test message")

        assertEquals<String>("test-logger", provider.lastLogName)
        assertEquals<String>("Test message", provider.lastLogMessage)
        assertEquals<Level>(LogLevel.TRACE, provider.lastLogLevel)
        assertEquals<Map<String, String>>(emptyMap(), provider.lastLogAttributes)
    }

    @Test
    fun testDebugAsync() = runTest {
        val provider = TestAsyncProvider()
        val logger = ColotokLogger("test-logger") {
            providers = listOf(provider)
        }

        logger.debugAsync("Test message")

        assertEquals<String>("test-logger", provider.lastLogName)
        assertEquals<String>("Test message", provider.lastLogMessage)
        assertEquals<Level>(LogLevel.DEBUG, provider.lastLogLevel)
        assertEquals<Map<String, String>>(emptyMap(), provider.lastLogAttributes)
    }

    @Test
    fun testInfoAsync() = runTest {
        val provider = TestAsyncProvider()
        val logger = ColotokLogger("test-logger") {
            providers = listOf(provider)
        }

        logger.infoAsync("Test message")

        assertEquals<String>("test-logger", provider.lastLogName)
        assertEquals<String>("Test message", provider.lastLogMessage)
        assertEquals<Level>(LogLevel.INFO, provider.lastLogLevel)
        assertEquals<Map<String, String>>(emptyMap(), provider.lastLogAttributes)
    }

    @Test
    fun testWarnAsync() = runTest {
        val provider = TestAsyncProvider()
        val logger = ColotokLogger("test-logger") {
            providers = listOf(provider)
        }

        logger.warnAsync("Test message")

        assertEquals<String>("test-logger", provider.lastLogName)
        assertEquals<String>("Test message", provider.lastLogMessage)
        assertEquals<Level>(LogLevel.WARN, provider.lastLogLevel)
        assertEquals<Map<String, String>>(emptyMap(), provider.lastLogAttributes)
    }

    @Test
    fun testErrorAsync() = runTest {
        val provider = TestAsyncProvider()
        val logger = ColotokLogger("test-logger") {
            providers = listOf(provider)
        }

        logger.errorAsync("Test message")

        assertEquals<String>("test-logger", provider.lastLogName)
        assertEquals<String>("Test message", provider.lastLogMessage)
        assertEquals<Level>(LogLevel.ERROR, provider.lastLogLevel)
        assertEquals<Map<String, String>>(emptyMap(), provider.lastLogAttributes)
    }

    @Test
    fun testTraceAsyncWithAttributes() = runTest {
        val provider = TestAsyncProvider()
        val logger = ColotokLogger("test-logger") {
            providers = listOf(provider)
        }

        val attributes = mapOf("key1" to "value1", "key2" to "value2")
        logger.traceAsync("Test message", attributes)

        assertEquals<String>("test-logger", provider.lastLogName)
        assertEquals<String>("Test message", provider.lastLogMessage)
        assertEquals<Level>(LogLevel.TRACE, provider.lastLogLevel)
        assertEquals<Map<String, String>>(attributes, provider.lastLogAttributes)
    }

    @Test
    fun testTraceAsyncWithLogStructure() = runTest {
        val provider = TestAsyncProvider()
        val logger = ColotokLogger("test-logger") {
            providers = listOf(provider)
        }

        val logStructure = TestLogStructure("Test message")
        logger.traceAsync(logStructure)

        assertEquals<String>("test-logger", provider.lastLogName)
        assertEquals<TestLogStructure>(logStructure, provider.lastLogStructure as TestLogStructure)
        assertEquals<Level>(LogLevel.TRACE, provider.lastLogLevel)
        assertEquals<Map<String, String>>(emptyMap(), provider.lastLogAttributes)
    }

    @Test
    fun testTraceAsyncWithLogStructureAndAttributes() = runTest {
        val provider = TestAsyncProvider()
        val logger = ColotokLogger("test-logger") {
            providers = listOf(provider)
        }

        val logStructure = TestLogStructure("Test message")
        val attributes = mapOf("key1" to "value1", "key2" to "value2")
        logger.traceAsync(logStructure, attributes)

        assertEquals<String>("test-logger", provider.lastLogName)
        assertEquals<TestLogStructure>(logStructure, provider.lastLogStructure as TestLogStructure)
        assertEquals<Level>(LogLevel.TRACE, provider.lastLogLevel)
        assertEquals<Map<String, String>>(attributes, provider.lastLogAttributes)
    }

    @Test
    fun testAtTraceAsync() = runTest {
        val provider = TestAsyncProvider()
        val logger = ColotokLogger("test-logger") {
            providers = listOf(provider)
        }

        logger.atTraceAsync {
            print("Test message")
        }

        assertEquals<String>("test-logger", provider.lastLogName)
        assertEquals<String>("Test message", provider.lastLogMessage)
        assertEquals<Level>(LogLevel.TRACE, provider.lastLogLevel)
        assertEquals<Map<String, String>>(emptyMap(), provider.lastLogAttributes)
    }

    @Test
    fun testAtDebugAsync() = runTest {
        val provider = TestAsyncProvider()
        val logger = ColotokLogger("test-logger") {
            providers = listOf(provider)
        }

        logger.atDebugAsync {
            print("Test message")
        }

        assertEquals<String>("test-logger", provider.lastLogName)
        assertEquals<String>("Test message", provider.lastLogMessage)
        assertEquals<Level>(LogLevel.DEBUG, provider.lastLogLevel)
        assertEquals<Map<String, String>>(emptyMap(), provider.lastLogAttributes)
    }

    @Test
    fun testAtInfoAsync() = runTest {
        val provider = TestAsyncProvider()
        val logger = ColotokLogger("test-logger") {
            providers = listOf(provider)
        }

        logger.atInfoAsync {
            print("Test message")
        }

        assertEquals<String>("test-logger", provider.lastLogName)
        assertEquals<String>("Test message", provider.lastLogMessage)
        assertEquals<Level>(LogLevel.INFO, provider.lastLogLevel)
        assertEquals<Map<String, String>>(emptyMap(), provider.lastLogAttributes)
    }

    @Test
    fun testAtWarnAsync() = runTest {
        val provider = TestAsyncProvider()
        val logger = ColotokLogger("test-logger") {
            providers = listOf(provider)
        }

        logger.atWarnAsync {
            print("Test message")
        }

        assertEquals<String>("test-logger", provider.lastLogName)
        assertEquals<String>("Test message", provider.lastLogMessage)
        assertEquals<Level>(LogLevel.WARN, provider.lastLogLevel)
        assertEquals<Map<String, String>>(emptyMap(), provider.lastLogAttributes)
    }

    @Test
    fun testAtErrorAsync() = runTest {
        val provider = TestAsyncProvider()
        val logger = ColotokLogger("test-logger") {
            providers = listOf(provider)
        }

        logger.atErrorAsync {
            print("Test message")
        }

        assertEquals<String>("test-logger", provider.lastLogName)
        assertEquals<String>("Test message", provider.lastLogMessage)
        assertEquals<Level>(LogLevel.ERROR, provider.lastLogLevel)
        assertEquals<Map<String, String>>(emptyMap(), provider.lastLogAttributes)
    }

    @Test
    fun testAtAsyncWithLevel() = runTest {
        val provider = TestAsyncProvider()
        val logger = ColotokLogger("test-logger") {
            providers = listOf(provider)
        }

        logger.atAsync(LogLevel.INFO) {
            print("Test message")
        }

        assertEquals<String>("test-logger", provider.lastLogName)
        assertEquals<String>("Test message", provider.lastLogMessage)
        assertEquals<Level>(LogLevel.INFO, provider.lastLogLevel)
        assertEquals<Map<String, String>>(emptyMap(), provider.lastLogAttributes)
    }
}
